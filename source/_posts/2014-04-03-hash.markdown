---
layout: post
title: "hash"
date: 2014-04-03 08:24:05 +0800
comments: true
categories: [algorithm]
tags: [hash,algorithm]
---
##HashTable（哈希表）
> 散列表（Hash table，也叫哈希表），是根据关键字（Key value）而直接访问在内存存储位置的数据结构。也就是说，它通过把键值通过一个函数的计算，映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做散列函数，存放记录的数组称做散列表。[wiki](http://zh.wikipedia.org/zh/%E5%93%88%E5%B8%8C%E8%A1%A8)  

###散列函数
* 直接寻址法：取关键字或关键字的某个线性函数值为散列地址  
* 数字分析法：分析一组key数据，尽可能利用这组数据来构造冲突几率低的散列地址  
* 平方取中法：取关键字平方后的中间几位做散列地址  
* 折叠法：将关键字分割成位数相同的几部分，最后一部分位数可以不同，然后取这几部分的叠加和（去除进位）作为散列地址。数位叠加可以有移位叠加和间界叠加两种方法。移位叠加是将分割后的每一部分的最低位对齐，然后相加；间界叠加是从一端向另一端沿分割界来回折叠，然后对齐相加。  
* 随机数法：选择一随机函数，取关键字的随机值作为散列地址  
* 除留余数法：取关键字被某个不大于散列表表长m的数p除后所得的余数为散列地址  
<!-- more -->

###冲突处理
1. 链地址法
2. 开放定址法（线性探测再散列，二次探测再散列，伪随机探测再散列）
3. 再哈希法
4. 建立一公共溢出区

###ELFHash算法
{%include_code lang:c c_learning/elfhash.c%}  
2014/4/3 9:37:11 

